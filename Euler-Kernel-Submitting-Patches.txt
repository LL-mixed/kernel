
		Guideline For Submitting Patches To Euler Kernel


Author:		zhangwei(Jovi) <jovi.zhangwei@huawei.com>
Reviewed-by: 	Li Zefan <lizefan@huawei.com>
Date:		2013.6.3

===========================
Steps of submitting patches
===========================
1. Compile
   Make sure your changes can pass compile successfully in euler-kernel.
   When backporting a patch from distribution or mainline, it's necessary
   to verify the patch can be applied and pass compile in euler-kernel.

2. Test
   Test the patch in local Linux machine, and make sure the code that the
   patch touch can be covered if at all possible.

3. Generate patches
   Use git-format-patch to generate patches, and if it's a patchset, it's
   better to use --cover-letter option to describe what the patchset does.

   Using scripts/checkpatch.pl to make sure there's no coding style issue.

   And make sure your patch follow unified euler patch format describe
   below.

4. Send patch to euler-kernel mailing list
   Use below command to send patches to euler mailing list

   git send-email * --to="kernel.openeuler@huawei.com" --from="your email" \
   --suppress-cc=all

   *NOTE*: that you must add --suppress-cc=all if you use git send-email,
   otherwise the email will be cced to the people outside and public mailing
   lists.


========================
Use unified patch format
========================
Reasons:

1) long term maintainability
   euler-kernel will merge massive patches, from rt, stable, vender, mainline,
   rtos/serveros, etc. If all patches are merged by casual changelog format
   without a unified format, the git log will be messy, and then it's hard to
   figure out if a patch is a stable backport or an rt fix for example, and
   this will degrade the quality of our kernel from patch management point of
   view.

2) kernel upgrade
   we definitely will upgrade our euler-kernel in someday, using strict patch
   management will alleviate the pain to migrate patches during big upgrade.

3) easy for script parsing
   keyword highlighting is necessary for script parsing, and git log --grep="xxx".


=======================
Patch format definition
=======================
[M] stands for "mandatory"
[O] stands for "option"
$category can be: bug preparation, bugfix, perf, feature, doc, config, other...

If category is feature, then we also need to add feature name like below:
	category: feature
	feature: YYY (the feature name)

1. stable patch
	stable inclusion	[M]
	from $stable-version	[M]
	upstream commit $id	[M]

	additional changelog	[O]

	--------------------------------

	original changelog

	Integrated-by: $author <$name@huawei.com>	[M]

	($stable-version would be 3.4.40, 3.4.41, etc...)

2. mainline patch
	mainline inclusion	[M]
	from $mainline-version	[M]
	upstream commit $id	[M]
	category: $category	[M]

	additional changelog	[O]

	--------------------------------

	original changelog

	Integrated-by: $author <$name@huawei.com>	[M]

	($mainline-version could be 3.5, 3.6, etc...)

3. distribution patch
	dist inclusion		[M]
	from $dist-version	[M]
	upstream commit $id	[O]
	category: $category	[M]

	additional changelog	[O]

	--------------------------------

	original changelog

	Integrated-by: $author <$name@huawei.com>	[M]

	($dist-version could be windriver 4.3, suse 11 sp2, etc...)

4. rt patch
	rt inclusion		[M]
	from $rt-version	[M]
	category: $category	[M]

	additional changelog	[O]

	--------------------------------

	original changelog

	Integrated-by: $author <$name@huawei.com>	[M]

	($rt-version would be rt-3.6, rt-3.10 etc...)

5. euler patch
	euler inclusion		[M]
	category: $category	[M]

	changelog

	Signed-off-by: $author <$name@huawei.com>	[M]

6. combinations inclusion patch
   There have two type combination inclusion patch: dist/rt and euler/rt.

6a. dist/rt patch (rt patch from distribution, like windriver)
	dist/rt inclusion	[M]
	from $dist-version	[M]
	category: $category	[M]

	additional changelog	[O]

	--------------------------------

	original changelog

	Integrated-by: $author <$name@huawei.com>	[M]

6b. euler/rt patch (rt patch commit by euler)
	euler/rt inclusion	[M]
	category: $category	[M]

	changelog

	Signed-off-by: $author <$name@huawei.com>	[M]
